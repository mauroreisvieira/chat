// Defining baseline
$baseLine: 6px;

// Defining font size default
$fontSizeDefault: 16px;

// Defining baseline line height
$lineHeight: 26px;

// Defining border radius
$borderRadius: 4px;

/*==========  FUNCTIONS  ==========*/
@function calculateRem($size, $fontDefault: $fontSizeDefault) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}

@function leading($size, $context: $lineHeight) {
  @return  $context / $size + em;
}

// Header
$topBarHeight: $baseLine * 12;

// Rooms
$roomsWidth: 66px;

// Defining breakpoints
$xSmall: 280px;
$small: 480px;
$medium: 620px;
$wide: 800px;
$huge: 1600px;
$smallContainer: 576px;
$mediumContainer: 688px;
$wideContainer: 864px;
$hugeContainer: 100%;

// Defining grid sizes
$mediumColCount: 3;
$mediumColWidth: 30.3%;
$mediumGutterWidth: 4.5%;
$wideColCount: 4;
$wideColWidth: 22.2%;
$wideGutterWidth: 3.7%;

// Defining colors

$colorAqua: #6DCCB6;
$colorBlue: #3372df;
$colorBlueSecondary: lighten($colorBlue, 30%);
$colorGreen: #0f9d58;
$colorGreenSecondary: lighten($colorGreen, 30%);
$colorRed: #cb4437;
$colorRedSecondary: lighten($colorRed, 30%);
$colorYellow: #f4b400;
$colorYellowSecondary: lighten($colorYellow, 20%);
$colorViolet: #6747CD;

$colorRemember: #09829a;
$colorLearning: #da2e75;

$colorChatContentMySelf: #5ba1f8;
$colorChatContent: #eff0f0;

$colorChatButton: #85C8C5;

$colorGrayBackground: #f0f0f0;
$colorGrayKeyline: #e0e0e0;
$colorGray: #737373;
$colorGrayDark: #404040;

$colorText: $colorGrayDark;
$colorHighlight: $colorBlue;
$colorWarning: $colorYellowSecondary;
$colorMuted: $colorGray;
$colorDanger: $colorRed;

$colorLayouts: #297ea9;
$colorLayoutsSecondary: lighten($colorLayouts, 30%);
$colorUser: #2c8566;
$colorUserSecondary: lighten($colorUser, 30%);
$colorMedia: #cf423a;
$colorMediaSecondary: lighten($colorMedia, 30%);
$colorPerformance: #7b5294;
$colorPerformanceSecondary: lighten($colorPerformance, 30%);

$colorUserOnline: #40c77a;
$colorUserOffline: #e25858;

// Defining font family
$fontDefault: Helvetica, Arial, sans-serif;
$fontHighlight: "Roboto Condensed", Helvetica, sans-serif;
$fontIcon: "icons";

// Defining font sizes
$fontXSmall: calculateRem(11px);
$fontSmall: calculateRem(14px);
$fontBase: calculateRem(16px);
$fontMedium: calculateRem(22px);
$fontLarge: calculateRem(28px);
$fontXLarge: calculateRem(44px);
$fontXXLarge: calculateRem(72px);
$fontHuge: calculateRem(86px);

// Defining font weight
$fontLight: 300;
$fontRegular: 400;
$fontBold: 700;
$fontSemiBold: 900;

// Defining animation easings
$animationEasing: cubic-bezier(0.455, 0.030, 0.515, 0.955);

// Defining sidebar stuff
$sidebarWidth: 280px;


/*==========  MIXINS  ==========*/

@mixin prefixr($property, $value...) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  #{$property}: $value;
}

@mixin media-query($media-query) {
  @if $media-query == small {
    @media only screen and (max-width:$medium - 1) { @content; }
  }

  @if $media-query == small-only {
    @media only screen and (min-width: $xSmall) and (max-width: $wide - 1) { @content; }
  }

  @if $media-query == medium {
    @media only screen and (min-width:$medium) { @content; }
  }

  @if $media-query == medium-only {
    @media only screen and (min-width:$medium) and (max-width: $wide - 1) { @content; }
  }

  @if $media-query == wide {
    @media only screen and (min-width:$wide) { @content; }
  }

  @if $media-query == huge {
    @media only screen and (min-width:$huge) { @content; }
  }
}

// Just some helpers...
@mixin small { @include media-query(small) { @content }; }
@mixin small-only { @include media-query(small-only) { @content }; }
@mixin medium { @include media-query(medium) { @content }; }
@mixin medium-only { @include media-query(medium-only) { @content }; }
@mixin wide { @include media-query(wide) { @content }; }
@mixin huge { @include media-query(huge) { @content }; }


@mixin keyframes($animation-name){
  @-webkit-keyframes $animation-name{
    @content;
  }

  @-moz-keyframes $animation-name{
    @content;
  }

  @-ms-keyframes $animation-name{
    @content;
  }

  @keyframes $animation-name{
    @content;
  }
}

// Mixin to constrain elements
@mixin container($isRelative: false) {
  @include prefixr(box-sizing, content-box);

  @if $isRelative {
    position: relative;
  }

  padding-left: 5%;
  padding-right: 5%;
  margin-left: auto;
  margin-right: auto;


  @include medium {
    padding-left: 4.8%;
    padding-right: 4.8%;
    max-width: $mediumContainer;
  }

  @include wide {
    padding-left: 4.4%;
    padding-right: 4.4%;
    max-width: $wideContainer;
  }
}

// Mixin to show a baseline grid
// only visible when body has 'debug' class
@mixin baseline-grid() {
  position: relative;

  &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    z-index: 9;

    display: none;
    background-image: -moz-linear-gradient(top, rgba(0,0,0,0) 95%, rgba(0,0,0,0.15) 100%);
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(95%,rgba(0,0,0,0)), color-stop(100%,rgba(0,0,0,0.15)));
    background-image: -webkit-linear-gradient(top, rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
    background-image: -o-linear-gradient(top, rgba(0,0,0,0) 95%, rgba(0,0,0,0.15) 100%);
    background-image: -ms-linear-gradient(top, rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
    background-image: linear-gradient(top, rgba(0,0,0,0.15) 95%,rgba(0,0,0,0.15) 100%);

    @include prefixr(background-size, 100% 26px);
  }

  &.debug:after {
    display: block;
    pointer-events: none;
  }
}

// Mixins simply to store CSS rules
@mixin rule--small {
  font-size: $fontSmall;
  line-height: 2.0000em; /* 26px */
  padding-top: 2.0000em;
  padding-bottom: 0;
}

@mixin rule--base {
  font-size: $fontBase;
  line-height: calculateRem(26px);
  padding-top: calculateRem(26px);
  padding-bottom: 0;
}

@mixin rule--medium {
  font-size: $fontMedium;
  font-weight: $fontLight;
  line-height: 1.3000em; /* 26px */
  padding-top: 1.3000em;
  padding-bottom: 0;
}

@mixin rule--large {
  font-family: $fontHighlight;
  font-size: $fontLarge;
  font-weight: $fontLight;
  line-height: 1.0000em; /* 26px */
  padding-top: 1.0000em;
  padding-bottom: 0;
}

@mixin rule--xlarge {
  font-family: $fontHighlight;
  font-size: $fontXLarge;
  font-weight: $fontLight;
  line-height: 1.2381em; /* 52px */
  padding-top: 0.6190em;
  padding-bottom: 0;
}

@mixin rule--xxlarge {
  font-family: $fontHighlight;
  font-size: $fontXXLarge;
  font-weight: $fontLight;
  line-height: 1.1471em; /* 78px */
  padding-top: 0.3824em;
  padding-bottom: 0;
}

@mixin rule--huge {
  font-family: $fontHighlight;
  font-size: $fontHuge;
  font-weight: $fontLight;
  line-height: 1.19em; /* 130px */
  padding-top: 0.2364em;
  padding-bottom: 0;
}

// Mixins to determine which rule to use at which breakpoint
@mixin type--small($isFromMixin: false) {
  @include rule--small;
}

@mixin type--base($isFromMixin: false) {
  @include rule--base;
}

@mixin type--medium($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--base(true);
    @include wide {
      @include rule--medium;
    }
  }
  @else {
    @include rule--medium;
  }
}

@mixin type--large($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--medium(true);
    @include wide {
      @include rule--large;
    }
  }
  @else {
    @include rule--large;
  }
}

@mixin type--xlarge($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--large(true);
    @include wide {
      @include rule--xlarge;
    }
  }
  @else {
    @include rule--xlarge;
  }
}

@mixin type--xxlarge($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--xlarge(true);
    @include wide {
      @include rule--xxlarge;
    }
  }
  @else {
    @include rule--xxlarge;
  }
}

@mixin type--huge($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--xxlarge(true);
    @include wide {
      @include rule--huge;
    }
  }
  @else {
    @include rule--huge;
  }
}

// LISTS
@mixin bullet-type($bullet, $icon: false) {
  &:before {
    @if $icon {
      font-family: $fontIcon;
      @extend .#{$icon}:before;
      font-size: $fontSmall;
    }
    @else {
      content: $bullet;
      font-family: $fontHighlight;
    }

    display: block;
    font-weight: $fontRegular;
    position: absolute;
    top: 0;
    left: 0;
    line-height: $lineHeight;

  }
}

@mixin numbered-list() {
  &:before {
    counter-increment: list;
    content: "0" counter(list);
    color: inherit;
    font-weight: $fontRegular;
    display: inline-block;
    position: absolute;
    left: 0;
  }
}

// Mixin to create links
@mixin style-cta($textColor, $linkIcon: false) {
  font-family: $fontHighlight;
  color: $textColor;
  font-weight: $fontRegular;
  display: inline-block;
  line-height: 1;

  &:hover {
    color: $colorGrayDark;
  }

  @if $linkIcon {
    text-decoration: none;
    &:before {
      display: inline-block;
      padding-right: 10px;
      font-family: $fontIcon;
      line-height: ($lineHeight) - 1; // remove 1px from line-height to fix baseline alignment
      font-size: $fontSmall;
      content: $linkIcon;
    }
  }
}

// Mixin to create highlight modules
@mixin highlight-symbol($verticalOffset: 0, $horizontalOffset: 45px, $fontSize: 130px) {
  position: relative;

  &:before {
    display: none;

    @include medium {
      display: block;
      position: absolute;
      top: 106px;
      right: $horizontalOffset;

      font-family: $fontIcon;
      font-size: $fontSize;
      line-height: 1px;
      text-align: center;
      height: 100%;
      width: $mediumColWidth;
      color: #ffffff;
    }

    .highlight-module--left & {
      right: auto;
      left: $horizontalOffset;
    }

    @include wide {
      top: 134px;
      width: $wideColWidth;
      font-size: $fontSize + 50;

      .highlight-module--large & {
        font-size: $fontSize + 300;
      }
    }
  }
}

// Grid CSS rules
@mixin rule--col($mediaQuery) {
  @if $mediaQuery == medium {
    float: left;
    margin-right: $mediumGutterWidth;
  }

  @if $mediaQuery == wide {
    float: left;
    margin-right: $wideGutterWidth;
  }
}

// Mixin for flexbox
@mixin flexbox {
  display: -moz-box;
  display: -webkit-flex;
  display: flex;
}
